@page "/"
@using Azure.AI.OpenAI
@using FunCoding.BlazorChatbot.Models
@using FunCoding.BlazorChatbot.Services
@inject IChatService ChatService
<PageTitle>Index</PageTitle>
<Div Height="Height.Is100">
    <Div Height="Height.Is75">
        <Heading Size="HeadingSize.Is1" Margin="Margin.Is4.FromTop">Hello, ChatGPT!</Heading>
        <Blazorise.Components.ListView TItem="Message"
                                       Data="_messages"
                                       TextField="(item) => item.Content"
                                       ValueField="(item) => item.Id.ToString()"
                                       Mode="ListGroupMode.Static"
                                       MaxHeight="100%"
                                       Virtualize="true">
            <ItemTemplate>
                <Div Flex="Flex.InlineFlex.JustifyContent.Between" Width="Width.Is100">
                    <Heading Margin="Margin.Is2.FromBottom">@context.Item.Role</Heading>
                    <Small>@context.Item.DateTime.ToString("yyyy MMMM dd HH:mm:ss")</Small>
                </Div>
                <Paragraph Margin="Margin.Is2.FromBottom">@((MarkupString)context.Item.HtmlContent)</Paragraph>
            </ItemTemplate>
        </Blazorise.Components.ListView>
    </Div>
    <Div VerticalAlignment="VerticalAlignment.Bottom" Width="Width.Is100" Height="Height.Auto">
        <MemoEdit Placeholder="Ask a question or send a message..." AutoSize
                  @bind-Text="_userMessage"/>
        <Div Flex="Flex.InlineFlex.JustifyContent.End" Width="Width.Is100">
            <Button Color="Color.Primary" @onclick="SendMessage"
                    Margin="Margin.Is2.FromTop">Send</Button>
        </Div>
    </Div>
</Div>
@code
{
    private string _userMessage = string.Empty;
    private readonly List<Message> _messages = new();
    private readonly string _deployName = "Your deployName";
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _userMessage = string.Empty;
    }

    private async Task SendMessage()
    {
        _messages.Add(new Message(ChatRole.User, _userMessage, DateTime.Now, Guid.NewGuid()));
        _userMessage = string.Empty;

        var response = await ChatService.GetChatCompletionsAsync(_deployName, _userMessage, _messages);
        var completions = response.Value;
        _messages.Add(new Message(completions.Choices[0].Message.Role, completions.Choices[0].Message.Content, DateTime.Now, Guid.NewGuid()));
        //var response = await ChatService.GetChatCompletionsStreamingAsync(_deployName, _userMessage, _chatMessages);
        //using var stream = response.Value;
        //Console.WriteLine("test");
        //await foreach (var choice in stream.GetChoicesStreaming())
        //{
        //    await foreach (var message in choice.GetMessageStreaming())
        //    {
        //        _chatMessages.Add(new ChatMessage(message.Role, message.Content));
        //        Console.WriteLine(message.Content);
        //    }
        //}

    }

}
